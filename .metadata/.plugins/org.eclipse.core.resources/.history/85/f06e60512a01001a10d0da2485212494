package Chapter5_practice1_6;

import java.util.Scanner;

interface Stack {
	int length();
	Object pop();
	boolean push(Object ob);
}

public class StringStack implements Stack{
	static Scanner sc = new Scanner(System.in);
	static int stackSize;
	static int point;
	//int arrParameter;
	static String stackArray[];
	
	public StringStack() {
		
	}
	
	public StringStack(int stackSize) {
		this.stackSize=stackSize;
		stackArray = new String[this.stackSize];
		point=-1;
		
		for(int i=0; i<stackArray.length; i++)
			stackArray[i]=null;
	}
	
	public int length(){
		return stackSize;
	}
	
	public static boolean push(Object ob){
		if(empty()){
			point++;
			getString();
			System.out.println("Pushing has been completed!");
		} else //if there are no space to push
			System.out.println("Pushing has been completed!");
		
		
	}
	
	public static void getString(){
		if(stackArray[point].equals(null)){
			System.out.print("Write String>>");
			stackArray[point]=sc.nextLine();
		}
	}	
	
	public static boolean empty(){
		if(point == -1 || stackArray[point].equals(null)){ //배열전체가 null || 가리키는 그 주소의 배열의 값이 없을때
			return true;
		} else if(point >= stackSize){ //point >= 5;
			return false;
		} else if(-1<point && point<stackSize){ //-1<point<5
			return true;
		} else{
			return false;
		}
	}
	
	public static void popEmpty(Object ob){
		if(stackArray[point] != null || !(point==-1)) //null이 아니면! 즉, 안에 값이 있으면
			System.out.println("Current value of the stackArray["+point+"] >>"+stackArray[point]+" is about to get deleted.");
		
	}
		
	public Object pop(){
		//문자열 출력하고
		//지우기
		if(stackArray[point] != null || !(point==-1)){ //null이 아니면! 즉, 안에 값이 있으면
			System.out.println("Current value of the stackArray["+point+"] >>"+stackArray[point]+" is about to get deleted.");
			point--;
			return null;
		} else 
		return null;
	}
	
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int menu=0;
		int count=-1;
		int stSize = 5;
		
		do{
			System.out.print("Push<1>, Pop<2>, Stack Length<3>, Exit<4> >>");
			menu = sc.nextInt();
			
			switch(menu){
				case 1:
					if(push(new StringStack(stSize))){//이것이 실행될때 생성자먼저 호출됨{
						System.out.println("Pushing has been completed!");
						count++;
					}
					break;
					
				case 2:
					
					break;
					
				case 3:
					System.out.println("The size of the String Stack>>"+StringStack.stackSize);
					break;
				case 4:
					System.exit(0);
					break;
			}
		}while(count<stSize);
		
	}

}
